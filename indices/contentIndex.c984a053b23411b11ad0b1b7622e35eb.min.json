{"/":{"title":"My Blog","content":"\nHello world","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Algorithm/A-star-algorithm":{"title":"A star algorithm","content":"\nA star (A*) pathfinding algorithm.\n\nIt works almost same with [[Wiki/Algorithm/Dijkstra algorithm]], but with heuristic approach.\nDistance to all unvisited nodes are calculated with $g(v) + h(v)$ where $g(v)$ is the actual cost from start to $v$, $h(v)$ is the estimated cost from v to end.\n\nIf $h(v)$ is always $0$, it does exact same thing with [[Wiki/Algorithm/Dijkstra algorithm]].\n\nIn many path finding problems, we can get spatial information. A* algorithm uses this information as $h(v)$ to make searching faster.","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Algorithm/Dijkstra-algorithm":{"title":"Dijkstra algorithm","content":"\n","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Computer-Science/Floating-point":{"title":"Floating point","content":"\nComputers represent real numbers as something called floating point numbers. The reason why they are called like this is that radix point can float anywhere between the significant digits. So this is kind of scientific notation where numbers are represented with exponent and significand.\n\n## Format\nMost commonly used floating point representation follows IEEE 754 standard.\n- 1 sign bit to represent the sign of the number.\n\t- 0 for positive numbers, 1 for negative numbers.\n- $E$ bits to represent the exponent.\n- $S$ bits to represent the significand.\n\t- Because the numbers are normalized, the first significant number is always $1$. They actually have $S+1$ bits of precision.\n\n| Type | Sign | Exponent ($E$) | Significand ($S$) | Total | Exponent Bias ($B$) | Number of decimal digits |\n| ----- | ----- | ---------- | ----------- | ---- | ------ | ----- |\n| Half | 1 | 5 | 10 | 16 | 15 | ~3.3 |\n| Single | 1 | 8 | 23 | 32 | 127 | ~7.2 |\n| Double | 1 | 11 | 52 | 64 | 1023 | ~15.9 |\n| x86 Extended Precision | 1 | 15 | 64 | 80 | 16383 | ~19.2 |\n\nSo the actual value is\n$$ (-1)^{SignBit} \\cdot (1.SignificandBits)_2 \\cdot 2^{Exponent - B} $$\nExponent is stored as an unsigned integer which is always positive. Because the bias $B$ is subtracted from the exponent, we can represent negative exponent.\n\n## Exponent encoding\nThere are some special cases where exponent is entirely filled with zero or one.\n\n### If both exponent and significand are zero\nThese numbers are just simply $0$.\nBut sign bit can be either zero or one, so they represent $+0$, $-0$ respectively. They just look same but work differently in some operations. For example,\n- $1 / +0$ returns $+\\infty$, $1 / -0$ returns $-\\infty$.\n\n### If exponent is zero, but significand is non-zero\nThese numbers are called subnormal numbers.\nIf every floating point numbers are forced to be normalized numbers, The smallest possible positive value will be:\n$$ (1.0000...)_2 \\cdot 2^{-B} = 2^{-B}$$\nBut if exponent is zero, significand is considered as denormalized numbers. As a result, they fill the gap between zero to the smallest normalized value linearly.\n\n### If exponent is filled with one and significand is zero\nThese numbers represent $+\\infty$, $-\\infty$ according to its sign bit. This happens when\n- $R / \\pm 0$, $R \\cdot \\pm \\infty$ where $R$ is neither $\\pm 0$ or $\\pm \\infty$.\n- $\\pm \\infty \\cdot \\pm \\infty$ \n\n### If exponent is filled with one and significand is non-zero\nThese numbers represent NaN (Not a Number). This happens when\n- $\\pm0 / \\pm0$, $\\pm\\infty / \\pm\\infty$\n- $\\infty - \\infty$, $-\\infty +\\infty$\n\n## Base Conversion\n\u003e[!todo]\n\n## Arithmetic\n\u003e[!todo]\n\n## Extended Double Precision\nx86 processors used 80 bits floating point internally. These values (registers) are stored in floating-point unit (FPU). The benefit is that they can minimize roundoff and overflow errors thanks to the high precision. So every 32, 64 bits floating point values are converted to 80 bits first. Then do some calculations in 80 bits precision and rounded back to its original precision.\nIn x86 compatible GCC compilers,  `long double` type is available for 80 bits precision. We can store values back to this variable without loss of precision.\nFor memory alignment purposes, `long double` variable usually takes 16 or 12 bytes.\n\n\u003e [!warning]\n\u003e MSVC compilers treat `long double` as 64-bit floating point numbers.\n\u003e C++ standard specifies that `long double` must be a superset of the values that a `double` can represent. That means `long double` still can be 64-bit floating point. Actually  `long double` is identical to `double` on many architectures.\n\nBut this can also have some side effects too. In debug build, intermediate 80-bit values should be writed to main memory so they are constantly casted to 32 or 64-bit, causing precision loss. While in debug build, some consecutive operations can be entirely done in 80-bit registers, the results can be different.\n\n## Precision Issue\nThe floating point numbers are logarithmically spaced, not linearly.\nThat means, If we try to add a large and a small number, Small numbers will likely to be ignored.\nAlso note that almost half of the entire floating point numbers are lying between just $-2$ to $2$. This is because exponent bias $B$ equals to $2^E / 2 - 1$.\n\n\u003e[!todo]\n\u003eWhy exponent bias  is determined like this?\n\n","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Computer-Science/GPU-architecture":{"title":"GPU architecture","content":"\n","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Computer-Science/Type-system":{"title":"Type system","content":"\n## Strong vs weak typing\n\u003e [!todo]\n\n## Static vs dynamic type checking\nStatic type checking is the process of verifying the type safety of a program with its source code, whereas dynamic type checking does at runtime. Static type checking can be seen as an optimization because it reduces various type safety checking at runtime.\nStill, many languages do both static and dynamic type checking. For example, [[Java]] is statically-typed language but every objects still have runtime type information (RTTI). This is useful when we try to downcast a object. Suppose `Dog` and `Cat` is a subclass of `Animal`.\n\n```java\nAnimal animal;\n// A condition we can't know at compile time.\nif (condition) {\n\tanimal = new Dog();\n}\nelse {\n\tanimal = new Cat();\n}\n...\nDog dog = (Dog) animal;\n```\n\nThis will work if the condition is true. Becuase the object in `animal` is actually a instance of the class `Dog`. What will happen if the condition is false? Well, it will throw `ClassCastException`. Obviously you can't cast a `Cat` object to a `Dog`. These type checking are done at runtime, so Java does dynamic type checking also.\n\n\u003e[!note]\n\u003e You can use `instanceof` operator to make the above example safe.\n\n## Structural vs duck typing\n\u003e [!todo]\n","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Language/C-Sharp":{"title":"C Sharp","content":"","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Language/Haskell":{"title":"Haskell","content":"\n### Monad\nhttps://stackoverflow.com/questions/11229854/how-can-i-parse-the-io-string-in-haskell\nhttps://sanderv1992.github.io/fp/monad/\nUse IO Monad only where it's necessary.\n \n### Install SDL2 in Windows 10\nhttps://www.reddit.com/r/haskellgamedev/comments/4jpthu/windows_sdl2_is_now_almost_painless_via_stack/\n\n### Making Our Own Types and Typeclasses\nhttp://learnyouahaskell.com/making-our-own-types-and-typeclasses\n\nhttps://serokell.io/blog/haskell-typeclasses\n\n### Use (-1) in params\nhttps://stackoverflow.com/questions/20391391/haskell-handling-negative-parameters\n\n### Convert numbers\nhttps://wiki.haskell.org/Converting_numbers","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Software-Development-Philosophy/Object-Oriented-Programming/SOLID":{"title":"SOLID","content":"\nSOLID is acronym for five principles to write more maintainable code in object oriented programming.\n- [[Single responsibility principle]]\n- [[Open-closed principle]]\n- [[Liskov substitution principle]]\n- [[Interface segregation principle]]\n- [[Dependency inversion principle]]\n","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Software-Development-Philosophy/Object-Oriented-Programming/SOLID/Dependency-inversion-principle":{"title":"","content":"","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Software-Development-Philosophy/Object-Oriented-Programming/SOLID/Interface-segregation-principle":{"title":"","content":"","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Software-Development-Philosophy/Object-Oriented-Programming/SOLID/Liskov-substitution-principle":{"title":"","content":"","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Software-Development-Philosophy/Object-Oriented-Programming/SOLID/Open-closed-principle":{"title":"","content":"","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null},"/Wiki/Software-Development-Philosophy/Object-Oriented-Programming/SOLID/Single-responsibility-principle":{"title":"Single responsibility principle","content":"\nSingle responsibility principle imples \"A class should have only one reason to change\".\nIf a class has more than one responsibility, then the responsibilities become coupled. Breaking them into multiple classes could make you to think about more flexible code structure.\n\nI personally think 'one responsibility' is quite ambiguous. Too many things being handled in a single class is a generally bad idea if you consider flexibility, But spreading micro-sized classes all over the place could be a bad idea too. Martin also noted that the SRP should be applied only if two responsibilities changed at different times. Otherwise it will increase needless complexity.\n\n### Example\nThis example was taken from 'Agile Software Development' by Robert C. Martin.\n\n![[Pasted image 20221112003204.png]]\n\nThe `Rectangle` class violates the SRP. It has two responsibilities.\n- Providing a mathematical model of the geometry.\n- Rendering the geometry to a GUI.\nSince the `Computational Geometry Application` has nothing to do with `GUI`, the unncessary dependency was created. If we only changed the rendering logic of the `Rectangle` class, the change might impact the `Computational Geometry Application` in some ways.\nAccording to the SRP, we can separate responsibilities like this.\n\n![[Pasted image 20221112003232.png]]\n","lastmodified":"2022-11-11T16:29:53.552375661Z","tags":null}}